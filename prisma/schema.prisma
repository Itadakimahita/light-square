generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String           @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[]      @relation("StoreToBillboard")
  categories      Category[]       @relation("StoreToCategory")
  meats           Meat[]     @relation("StoreToMeat")
  sections        Section[]          @relation("StoreToSection")
  products        Product[]        @relation("StoreToProduct")
  places          Place[]          @relation("StoreToPlace")
  orders          Order[]          @relation("StoreToOrder")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  name        String
  price       Decimal
  categoryId      String    // Foreign Key to Size
  category        Category      @relation(fields: [categoryId], references: [id])
  meatId     String    // Foreign Key to Color
  meat       Meat     @relation(fields: [meatId], references: [id])
  mass  Decimal
  isCastrated Boolean
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([meatId])
}

model Category {
  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  name        String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Meat {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToMeat", fields: [storeId], references: [id])
  name        String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Place {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToPlace", fields: [storeId], references: [id])
  name        String
  description String  @db.Text
  location    String
  sectionId   String    
  section     Section  @relation("SectionToPlace", fields: [sectionId], references: [id])
  images      ImagePlace[]   // Relation to Image model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([sectionId])
}

model Section {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToSection", fields: [storeId], references: [id])
  name        String
  places      Place[]     @relation("SectionToPlace")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Order {
  id        String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model ImagePlace {
  id          String   @id @default(uuid())
  placeId     String   // Foreign Key to Product
  place       Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([placeId])
}
